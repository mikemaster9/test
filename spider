using CefSharp;
using CefSharp.WinForms;
using System;
using System.Threading.Tasks;
using System.Windows.Forms;

public class CefSharpBrowserHelper
{
    public ChromiumWebBrowser browser;

    public CefSharpBrowserHelper(string initialUrl)
    {
        InitializeCefSharp();
        CreateBrowserInstance(initialUrl);
    }

    private void InitializeCefSharp()
    {
        var settings = new CefSettings();
        // 添加更多的CefSharp设置
        Cef.Initialize(settings);
    }

    private void CreateBrowserInstance(string url)
    {
        browser = new ChromiumWebBrowser(url);
        // 可以添加更多的浏览器配置，如事件监听
    }

    public void LoadPage(string url)
    {
        browser.Load(url);
    }

    public Task<string> GetPageSourceAsync()
    {
        var taskCompletionSource = new TaskCompletionSource<string>();
        EventHandler<LoadingStateChangedEventArgs> handler = null;
        handler = (sender, args) =>
        {
            // 确保页面加载完毕
            if (!args.IsLoading)
            {
                browser.LoadingStateChanged -= handler;
                browser.ViewSource().ContinueWith(t =>
                {
                    if (!t.IsFaulted)
                    {
                        taskCompletionSource.SetResult(t.Result);
                    }
                });
            }
        };

        browser.LoadingStateChanged += handler;

        return taskCompletionSource.Task;
    }

    public Task<object> ExecuteScriptAsync(string script)
    {
        return browser.EvaluateScriptAsync(script).ContinueWith(t =>
        {
            if (!t.IsFaulted)
            {
                var response = t.Result;
                return response.Success ? response.Result : null;
            }
            return null;
        });
    }

    public static void Cleanup()
    {
        Cef.Shutdown();
    }
}

[STAThread]
static void Main()
{
    Application.EnableVisualStyles();
    Application.SetCompatibleTextRenderingDefault(false);

    var form = new Form();
    var browserHelper = new CefSharpBrowserHelper("https://www.example.com");

    form.Controls.Add(browserHelper.browser);
    form.Load += async (sender, args) =>
    {
        await Task.Delay(5000); // 等待页面加载
        var pageSource = await browserHelper.GetPageSourceAsync();
        Console.WriteLine(pageSource);
    };

    Application.Run(form);
}

//==
using CefSharp;
using CefSharp.WinForms;
using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using System.Windows.Forms;
using HtmlAgilityPack;

public class AdvancedWebCrawler
{
    private ChromiumWebBrowser browser;

    // 用于缓存Cookie
    private IRequestContext requestContext;

    public AdvancedWebCrawler()
    {
        InitializeCefSharp();
    }

    private void InitializeCefSharp()
    {
        var settings = new CefSettings();
        // 初始化CefSharp的设置
        Cef.Initialize(settings);

        // 创建一个新的请求上下文，用于独立Cookie管理
        requestContext = new RequestContext();
        browser = new ChromiumWebBrowser("", null, requestContext);
    }

    public async Task LoadPageAsync(string url)
    {
        var tcs = new TaskCompletionSource<bool>();
        EventHandler<LoadingStateChangedEventArgs> handler = null;
        handler = (sender, args) =>
        {
            // 确保页面加载完毕
            if (!args.IsLoading)
            {
                browser.LoadingStateChanged -= handler;
                tcs.SetResult(true);
            }
        };

        browser.LoadingStateChanged += handler;
        browser.Load(url);

        await tcs.Task; // 等待页面加载完成
    }

    public async Task<string> GetPageSourceAsync()
    {
        return await browser.GetSourceAsync();
    }

    public async Task<object> ExecuteScriptAsync(string script)
    {
        var response = await browser.EvaluateScriptAsync(script);
        if (response.Success && response.Result != null)
        {
            return response.Result;
        }
        return null;
    }

    // 更多方法，如登录、Cookie处理、解析内容等，需要根据具体需求实现
}


