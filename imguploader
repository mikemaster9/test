(function($) {
    $.fn.imageUploader = function(options) {
        const defaultOptions = { maxImages: 2, imagesPerRow: 2 };
        return this.each(function() {
            new ImageUploader($(this), $.extend({}, defaultOptions, options));
        });
    };

    class ImageUploader {
        constructor(container, options = {}) {
            this.container = container;
            this.options = options;
            this.images = [];
            this.injectStyles();
            this.init();
        }

        init() {
            this.render();
            this.bindEvents(); // 绑定事件
        }

        bindEvents() {
            this.container.on("click", ".remove", (e) => {
                const index = $(e.currentTarget).parent().index();
                e.stopPropagation();
                this.removeImage(index);
            });
        }

        clearContainer() {
            this.container.empty();
        }

        render() {
            this.clearContainer(); 
            this.images.forEach((src, index) => {
                this.createImageItem(src, index);
            });
            if (this.images.length < this.options.maxImages) {
                this.createUploadButton();
            }
            this.adjustContainerWidth();
        }

        loadImages(imageArray) {
            this.images = imageArray;
            this.render();
        }

        injectStyles() {
            const style = document.createElement("style");
            style.innerHTML = `
                .image-uploader-container {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 10px;
                    border: 2px dashed #ccc;
                    padding: 10px;
                    border-radius: 5px;
                }
                .image-uploader-container .image-item {
                    position: relative;
                    width: 80px;
                    height: 80px;
                }
                .image-uploader-container .image-item img {
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    border-radius: 5px;
                }
                .image-uploader-container .image-item .remove {
                    position: absolute;
                    top: -5px;
                    right: -5px;
                    background: red;
                    color: white;
                    border-radius: 50%;
                    width: 20px;
                    height: 20px;
                    text-align: center;
                    cursor: pointer;
                }
                .image-uploader-container .upload-btn {
                    width: 80px;
                    height: 80px;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    font-size: 24px;
                    background: #f0f0f0;
                    border-radius: 5px;
                    cursor: pointer;
                }
            `;
            document.head.appendChild(style);
            this.container.addClass("image-uploader-container");
        }

        createImageItem(src, index) {
            const imgItem = $(`
                <div class="image-item">
                    <img src="${src}" />
                    <span class="remove">×</span>
                </div>
            `);
            imgItem.on("click", () => this.replaceImage(index));
            this.container.append(imgItem);
        }

        createUploadButton() {
            const uploadBtn = $('<div class="upload-btn">+</div>');
            uploadBtn.on("click", () => this.uploadImage());
            this.container.append(uploadBtn);
        }

        uploadImage() {
            const input = $('<input type="file" accept="image/*" />');
            input.on("change", (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        if (this.options.maxImages === 1) {
                            this.images = [event.target.result];
                        } else {
                            this.images.push(event.target.result);
                        }
                        this.render();
                    };
                    reader.onerror = () => {
                        console.error("File could not be read!");
                    };
                    reader.readAsDataURL(file);
                }
            });
            input.trigger("click");
        }

        replaceImage(index) {
            const input = $('<input type="file" accept="image/*" />');
            input.on("change", (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        this.images[index] = event.target.result;
                        this.render();
                    };
                    reader.onerror = () => {
                        console.error("File could not be read!");
                    };
                    reader.readAsDataURL(file);
                }
            });
            input.trigger("click");
        }

        removeImage(index) {
            this.images.splice(index, 1);
            this.render();
        }

        adjustContainerWidth() {
            const imagesPerRow = this.options.imagesPerRow;
            const imageWidth = 80; // image width (can be customized)
            const imageMargin = 10; // gap between images
            const totalWidth = (imageWidth + imageMargin) * imagesPerRow - imageMargin;
            this.container.css('width', totalWidth + 'px');
        }
    }
})(jQuery);
