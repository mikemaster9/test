(function($) {
    // 插件名称及默认配置
    $.fn.inputRestrictor = function(options) {
        // 默认规则配置
        var defaults = {
            // 示例规则
            rules: {
                'only-letters': /^[A-Za-z]+$/,
                'only-digits': /^\d+$/,
                // 可以添加更多规则...
            },
            // 指定一个父选择器，默认为'body'
            parentSelector: 'body'
        };

        // 将默认规则和用户定义的规则合并
        var settings = $.extend(true, {}, defaults, options);

        // 使用事件委托绑定input事件到父元素
        $(settings.parentSelector).on('input', this.selector, function() {
            var $this = $(this); // 当前触发事件的元素
            var classes = $this.attr('class').split(/\s+/); // 获取当前元素的class列表

            // 检查是否需要根据data-max属性限制数字的最大值
            var dataMax = $this.data('max');
            if (dataMax !== undefined && $.isNumeric(dataMax)) {
                var currentValue = parseInt($this.val(), 10);
                if (currentValue > dataMax) {
                    $this.val(dataMax); // 设置为最大允许的值
                    return; // 早期返回，防止进一步处理
                }
            }

            // 遍历class列表，检查是否匹配已定义的规则
            $.each(classes, function(index, className) {
                if(settings.rules[className]) {
                    var regex = new RegExp(settings.rules[className]);
                    if(!regex.test($this.val())) {
                        // 如果当前输入不匹配正则表达式，则移除不匹配的字符
                        var matched = $this.val().match(regex);
                        $this.val(matched ? matched[0] : '');
                    }
                }
            });
        });

        // 保持jQuery链式调用
        return this;
    };
})(jQuery);


(function($) {
    // 插件构造函数
    function InputRestrictor(element, options) {
        this.element = element;
        this.options = $.extend({}, $.fn.inputRestrictor.defaults, options);
        this.init();
    }

    // 默认选项
    $.fn.inputRestrictor.defaults = {
        rules: {}
    };

    // 插件原型定义，包含初始化方法
    InputRestrictor.prototype.init = function() {
        var self = this;
        // 遍历规则并应用
        $(this.element).find('input').each(function() {
            var input = $(this);
            $.each(self.options.rules, function(key, regex) {
                if (input.hasClass(key)) {
                    input.on('input', function() {
                        var re = new RegExp(regex);
                        if (!re.test(input.val())) {
                            input.val(input.val().replace(re, ''));
                        }
                    });
                }
            });
        });
    };

    // 将插件添加到jQuery.fn对象，使其可用于所有jQuery对象
    $.fn.inputRestrictor = function(options) {
        return this.each(function() {
            if (!$.data(this, "plugin_inputRestrictor")) {
                $.data(this, "plugin_inputRestrictor", new InputRestrictor(this, options));
            }
        });
    };
})(jQuery);

(function($) {
    // 插件构造函数
    function InputRestrictor(element, options) {
        this.element = element;
        this.options = $.extend({}, InputRestrictor.defaults, options);
        this.init();
    }

    // 默认选项，包括规则和父选择器
    InputRestrictor.defaults = {
        rules: {
            'only-letters': /^[A-Za-z]+$/,
            'only-digits': /^\d+$/
        },
        parentSelector: 'body' // 默认使用body作为事件委托的父选择器
    };

    // 插件原型定义
    InputRestrictor.prototype = {
        init: function() {
            this.bindEvents();
        },

        bindEvents: function() {
            var self = this;
            $(self.options.parentSelector).on('input', self.element, function(event) {
                self.handleInput(event);
            });
        },

        handleInput: function(event) {
            var $input = $(event.target);
            var classes = $input.attr('class').split(/\s+/);

            // 处理data-max属性
            this.applyDataMax($input);

            // 应用正则表达式规则
            $.each(classes, function(index, className) {
                if (self.options.rules[className]) {
                    var regex = new RegExp(self.options.rules[className]);
                    if (!regex.test($input.val())) {
                        var matched = $input.val().match(regex);
                        $input.val(matched ? matched[0] : '');
                    }
                }
            });
        },

        applyDataMax: function($input) {
            var dataMax = $input.data('max');
            if (dataMax !== undefined && $.isNumeric(dataMax)) {
                var currentValue = parseInt($input.val(), 10);
                if (currentValue > dataMax) {
                    $input.val(dataMax);
                }
            }
        }
    };

    // 将插件添加到jQuery.fn对象
    $.fn.inputRestrictor = function(options) {
        return this.each(function() {
            if (!$.data(this, 'plugin_inputRestrictor')) {
                $.data(this, 'plugin_inputRestrictor', new InputRestrictor(this, options));
            }
        });
    };
})(jQuery);

(function($) {
    // 插件名称及默认配置
    $.fn.inputRestrictor = function(options) {
        var defaults = {
            rules: {
                'only-letters': /^[A-Za-z]+$/,
                'only-digits': /^\d+$/,
                'decimal-format': /^(0|[1-9]\d*)(\.\d+)?$/ // 支持小数格式
            },
            parentSelector: 'body'
        };

        var settings = $.extend(true, {}, defaults, options);
        var composing = false; // 标记IME输入状态

        // 内部方法：验证输入值
        function validateInput($element) {
            if (composing) return; // 如果正在使用IME输入，不执行验证
            var value = $element.val(); // 当前值
            validateLength($element, value); // 验证字符长度限制
            validateDecimalFormat($element, value); // 特定的小数格式验证
            validateRules($element, value); // 应用正则表达式规则
        }

        // 内部方法：验证特定的小数格式
        function validateDecimalFormat($element, value) {
            // 检查是否有decimal-format类，并且值不为空
            if ($element.hasClass('decimal-format') && value) {
                // 如果值以0开头且后面紧跟非零数字或小数点，则允许；否则，纠正格式
                var isValidDecimal = /^(0(\.\d+)?|[1-9]\d*(\.\d+)?)$/.test(value);
                if (!isValidDecimal) {
                    var correctedValue = value.replace(/^(0+)(\d)/, '$2'); // 移除多余的前导零
                    $element.val(correctedValue);
                }
            }
        }

        // 使用事件委托绑定事件到父元素
        $(settings.parentSelector)
            .on('compositionstart', this.selector, function() {
                composing = true;
            })
            .on('compositionend', this.selector, function() {
                composing = false;
                validateInput($(this)); // 手动触发验证
            })
            .on('input', this.selector, function() {
                validateInput($(this));
            });

        return this; // 保持jQuery链式调用
    };
})(jQuery);

(function($) {
    // 插件构造函数
    function NumericInput(element, options) {
        this.element = element;
        this.options = $.extend({}, NumericInput.defaults, options);
        this.init();
    }

    // 默认选项
    NumericInput.defaults = {};

    // 插件原型定义
    NumericInput.prototype = {
        init: function() {
            this.bindEvents();
        },

        bindEvents: function() {
            $(this.element).on('input', this.validateInput.bind(this));
        },

        validateInput: function(event) {
            var $input = $(event.target);
            var value = $input.val();

            // 允许数字、小数点，但不允许多个小数点或前导零（除非是小数的一部分）
            var validValue = value.replace(/[^0-9.]/g, '') // 移除非数字和非小数点
                                  .replace(/(\..*)\./g, '$1') // 只保留第一个小数点
                                  .replace(/^0([0-9])/g, '$1') // 移除非小数的前导零
                                  .replace(/^0+$/g, '0'); // 如果全是零，保留一个零

            // 如果经过处理后的值与原始值不同，则更新输入框的值
            if (validValue !== value) {
                $input.val(validValue);
            }
        }
    };

    // 将插件添加到jQuery.fn对象
    $.fn.numericInput = function(options) {
        return this.each(function() {
            if (!$.data(this, 'plugin_numericInput')) {
                $.data(this, 'plugin_numericInput', new NumericInput(this, options));
            }
        });
    };
})(jQuery);

