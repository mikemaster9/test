(function($) {
    // 插件名称及默认配置
    $.fn.inputRestrictor = function(options) {
        // 默认规则配置
        var defaults = {
            // 示例规则
            rules: {
                'only-letters': /^[A-Za-z]+$/,
                'only-digits': /^\d+$/,
                // 可以添加更多规则...
            },
            // 指定一个父选择器，默认为'body'
            parentSelector: 'body'
        };

        // 将默认规则和用户定义的规则合并
        var settings = $.extend(true, {}, defaults, options);

        // 使用事件委托绑定input事件到父元素
        $(settings.parentSelector).on('input', this.selector, function() {
            var $this = $(this); // 当前触发事件的元素
            var classes = $this.attr('class').split(/\s+/); // 获取当前元素的class列表

            // 检查是否需要根据data-max属性限制数字的最大值
            var dataMax = $this.data('max');
            if (dataMax !== undefined && $.isNumeric(dataMax)) {
                var currentValue = parseInt($this.val(), 10);
                if (currentValue > dataMax) {
                    $this.val(dataMax); // 设置为最大允许的值
                    return; // 早期返回，防止进一步处理
                }
            }

            // 遍历class列表，检查是否匹配已定义的规则
            $.each(classes, function(index, className) {
                if(settings.rules[className]) {
                    var regex = new RegExp(settings.rules[className]);
                    if(!regex.test($this.val())) {
                        // 如果当前输入不匹配正则表达式，则移除不匹配的字符
                        var matched = $this.val().match(regex);
                        $this.val(matched ? matched[0] : '');
                    }
                }
            });
        });

        // 保持jQuery链式调用
        return this;
    };
})(jQuery);


(function($) {
    // 插件构造函数
    function InputRestrictor(element, options) {
        this.element = element;
        this.options = $.extend({}, $.fn.inputRestrictor.defaults, options);
        this.init();
    }

    // 默认选项
    $.fn.inputRestrictor.defaults = {
        rules: {}
    };

    // 插件原型定义，包含初始化方法
    InputRestrictor.prototype.init = function() {
        var self = this;
        // 遍历规则并应用
        $(this.element).find('input').each(function() {
            var input = $(this);
            $.each(self.options.rules, function(key, regex) {
                if (input.hasClass(key)) {
                    input.on('input', function() {
                        var re = new RegExp(regex);
                        if (!re.test(input.val())) {
                            input.val(input.val().replace(re, ''));
                        }
                    });
                }
            });
        });
    };

    // 将插件添加到jQuery.fn对象，使其可用于所有jQuery对象
    $.fn.inputRestrictor = function(options) {
        return this.each(function() {
            if (!$.data(this, "plugin_inputRestrictor")) {
                $.data(this, "plugin_inputRestrictor", new InputRestrictor(this, options));
            }
        });
    };
})(jQuery);