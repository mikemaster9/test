<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Custom Search Highlighter</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>

<script src="https://cdn.jsdelivr.net/npm/mark.js/dist/mark.min.js"></script>
<script src="script.js"></script>
</body>
</html>

#customSearchContainer {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: white;
    padding: 10px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    z-index: 1000;
}

#customSearchBox {
    margin-right: 5px;
}

class CustomSearchHighlighter {
    constructor() {
        if (CustomSearchHighlighter.instance) {
            return CustomSearchHighlighter.instance;
        }
        CustomSearchHighlighter.instance = this;

        this.searchDiv = null;
        this.markInstance = new Mark(document.querySelector("body"));
        this.createSearchUI();
    }

    createSearchUI() {
        if (document.getElementById("customSearchContainer")) return;

        this.searchDiv = document.createElement("div");
        this.searchDiv.id = "customSearchContainer";
        document.body.prepend(this.searchDiv);

        var searchBox = document.createElement("input");
        searchBox.id = "customSearchBox";
        this.searchDiv.appendChild(searchBox);

        var searchButton = document.createElement("button");
        searchButton.textContent = "搜索";
        this.searchDiv.appendChild(searchButton);

        var closeButton = document.createElement("button");
        closeButton.textContent = "关闭";
        this.searchDiv.appendChild(closeButton);

        searchButton.addEventListener("click", () => this.highlightText(searchBox.value));
        closeButton.addEventListener("click", () => this.closeSearchUI());
    }

    highlightText(searchText) {
        this.markInstance.unmark({
            done: () => {
                this.markInstance.mark(searchText);
            }
        });
    }

    closeSearchUI() {
        this.searchDiv.remove();
        this.searchDiv = null; // Allow garbage collection
    }
}

document.addEventListener('DOMContentLoaded', (event) => {
    new CustomSearchHighlighter();
});

using CefSharp.WinForms;
using System.Windows.Forms;

public void CreateNewTabWithSearch()
{
    // 创建新的ChromiumWebBrowser实例
    var browser = new ChromiumWebBrowser("about:blank");
    
    // 创建一个新的TabPage
    var tabPage = new TabPage("New Tab");
    tabPage.Controls.Add(browser);

    // 确保浏览器填充整个TabPage
    browser.Dock = DockStyle.Fill;

    // 添加TabPage到你的TabControl中
    // 假设你的TabControl名为tabControl
    tabControl.TabPages.Add(tabPage);

    // 选择新创建的Tab
    tabControl.SelectedTab = tabPage;

    // 加载包含搜索功能的页面或直接注入搜索功能的JavaScript代码
    // 这里直接注入JavaScript
    browser.LoadingStateChanged += (sender, args) =>
    {
        if (!args.IsLoading)
        {
            // 注入JavaScript代码
            browser.ExecuteScriptAsync(Properties.Resources.SearchFeatureScript);
        }
    };

    // 加载一个初始页面
    browser.Load("http://your-initial-page.com");
}
